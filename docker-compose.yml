# Docker Compose for Local Development
# Provides complete local development environment with database, backend, frontend, and supporting services

services:
  # Note: PostgreSQL database is managed by Supabase CLI
  # Use `supabase db start` to start the local database
  # Database will be available at: http://localhost:54321

  # Redis for Queue and Caching
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible object storage (Tigris alternative for local dev)
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DOMAIN: localhost
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development  # Use development stage if available
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Docker-specific overrides - these MUST override any values from .env file
      # Redis Configuration - ALWAYS use local Redis container in Docker
      REDIS_URL: redis://redis:6379/0

      # Database Configuration (Supabase CLI managed)
      # Start database with: supabase db start
      SUPABASE_URL: http://host.docker.internal:54321
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOuoJeoDQa2DEOh5NJVr5Y9Y1yG_iJjGwBhU}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}

      # Storage Configuration
      AWS_ENDPOINT_URL_S3: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      BUCKET_NAME: calorie-track-dev

      # Application Configuration
      APP_ENV: development
      LOG_LEVEL: DEBUG
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173

      # Feature Flags
      DEV_ENDPOINTS_ENABLED: true
      LOG_HASH_SECRET: dev-log-hash-secret-32-characters

      # Telegram Configuration (optional for development)
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      USE_WEBHOOK: false

      # OpenAI Configuration (optional for development)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: gpt-5-mini
    volumes:
      - ./backend/src:/app/src:ro
      - backend_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 5 &&
        echo 'Starting backend server...' &&
        python -m uvicorn calorie_track_ai_bot.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Background Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    restart: unless-stopped
    environment:
      # Docker-specific overrides - these MUST override any values from .env file
      # Redis Configuration - ALWAYS use local Redis container in Docker
      REDIS_URL: redis://redis:6379/0

      # Database Configuration (Supabase CLI managed)
      SUPABASE_URL: http://host.docker.internal:54321
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOuoJeoDQa2DEOh5NJVr5Y9Y1yG_iJjGwBhU}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU}
      APP_ENV: development
      LOG_LEVEL: DEBUG
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: gpt-5-mini
      # Tigris S3-compatible storage configuration
      AWS_ENDPOINT_URL_S3: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      BUCKET_NAME: calorie-track-photos
      AWS_REGION: us-east-1
    volumes:
      - ./backend/src:/app/src:ro
      - worker_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        echo 'Starting background worker...' &&
        python -m calorie_track_ai_bot.workers.estimate_worker
      "

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "5173:5173"  # Alternative Vite port
    environment:
      # API Configuration
      VITE_API_BASE_URL: http://localhost:8000
      VITE_API_TIMEOUT: 30000

      # Development Features
      VITE_ENABLE_DEBUG_LOGGING: true
      VITE_ENABLE_ERROR_REPORTING: false
      VITE_ENABLE_ANALYTICS: false
      VITE_ENABLE_DEV_TOOLS: true

      # UI Configuration
      VITE_ENABLE_SAFE_AREAS: true
      VITE_ENABLE_THEME_DETECTION: true
      VITE_ENABLE_LANGUAGE_DETECTION: true
      VITE_SUPPORTED_LANGUAGES: en,ru

      # Telegram Configuration
      VITE_TELEGRAM_BOT_NAME: ${TELEGRAM_BOT_NAME:-calorie_track_dev_bot}
      VITE_TELEGRAM_APP_URL: http://localhost:3000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm install &&
        echo 'Starting frontend development server...' &&
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy (optional for production-like testing)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    profiles:
      - proxy

  # Database Administration is handled by Supabase Studio
  # Access at: http://localhost:54323 when running `supabase db start`

  # Redis Admin (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    profiles:
      - admin

volumes:
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_logs:
    driver: local
  worker_logs:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  default:
    name: calorie-track-dev
    driver: bridge

# Development helpers
x-development-commands: &dev-commands
  # Prerequisites: Start Supabase database first
  # supabase db start

  # Quick start all core services (after starting Supabase)
  dev: docker-compose up redis minio backend frontend

  # Start with admin tools
  admin: docker-compose --profile admin up -d redis minio redis-commander

  # Production-like testing with proxy
  proxy: docker-compose --profile proxy up -d

  # Clean restart
  clean: docker-compose down -v && docker-compose up --build

  # Logs
  logs: docker-compose logs -f
  backend-logs: docker-compose logs -f backend
  frontend-logs: docker-compose logs -f frontend

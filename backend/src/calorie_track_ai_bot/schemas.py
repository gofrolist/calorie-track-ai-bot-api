# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-09-27T07:28:12+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field


class Status(Enum):
    queued = "queued"
    running = "running"
    done = "done"
    failed = "failed"


class MealType(Enum):
    breakfast = "breakfast"
    lunch = "lunch"
    dinner = "dinner"
    snack = "snack"


class EstimateItem(BaseModel):
    label: str
    kcal: float
    confidence: float


class PhotoCreateRequest(BaseModel):
    content_type: str = Field(..., description="MIME type of the image (e.g., image/jpeg)")


class MultiPhotoCreateRequest(BaseModel):
    photos: list[PhotoCreateRequest] = Field(
        ..., min_length=1, max_length=5, description="List of photos to upload (1-5 photos)"
    )


class PhotoInfo(BaseModel):
    id: str
    upload_url: str
    file_key: str


class MultiPhotoResponse(BaseModel):
    photos: list[PhotoInfo]


class MealCreateManualRequest(BaseModel):
    meal_date: date
    meal_type: MealType
    kcal_total: float
    macros: dict[str, Any] | None = None


class MealCreateFromEstimateRequest(BaseModel):
    meal_date: date
    meal_type: MealType
    estimate_id: str
    overrides: dict[str, Any] | None = None


class MealCreateResponse(BaseModel):
    meal_id: str


class PresignResponse(BaseModel):
    photo_id: str
    upload_url: str


class EstimateQueuedResponse(BaseModel):
    estimate_id: str
    status: Status


class EstimateResponse(BaseModel):
    id: str = Field(..., description="Estimate ID")
    photo_id: str
    kcal_mean: float
    kcal_min: float
    kcal_max: float
    confidence: float
    breakdown: list[EstimateItem]
    status: Status | None = None


class TelegramUser(BaseModel):
    id: int
    is_bot: bool
    first_name: str
    last_name: str | None = None
    username: str | None = None
    language_code: str | None = None


class Type(Enum):
    private = "private"
    group = "group"
    supergroup = "supergroup"
    channel = "channel"


class TelegramChat(BaseModel):
    id: int
    type: Type
    title: str | None = None
    username: str | None = None
    first_name: str | None = None
    last_name: str | None = None


class TelegramPhotoSize(BaseModel):
    file_id: str
    file_unique_id: str
    width: int
    height: int
    file_size: int | None = None


class TelegramDocument(BaseModel):
    file_id: str
    file_unique_id: str
    file_name: str | None = None
    mime_type: str | None = None
    file_size: int | None = None


class TelegramWebhookInfo(BaseModel):
    url: str
    has_custom_certificate: bool
    pending_update_count: int
    ip_address: str | None = None
    last_error_date: int | None = None
    last_error_message: str | None = None
    max_connections: int | None = None
    allowed_updates: list[str] | None = None


class TelegramAuthRequest(BaseModel):
    init_data: str = Field(..., description="Telegram WebApp init data")
    hash: str = Field(..., description="Hash for verification")


class TelegramAuthResponse(BaseModel):
    user_id: str
    session_token: str
    expires_at: AwareDatetime


class TelegramMessage(BaseModel):
    message_id: int
    from_: TelegramUser = Field(..., alias="from")
    chat: TelegramChat
    date: int
    text: str | None = None
    photo: list[TelegramPhotoSize] | None = None
    document: TelegramDocument | None = None


class TelegramCallbackQuery(BaseModel):
    id: str
    from_: TelegramUser = Field(..., alias="from")
    message: TelegramMessage | None = None
    data: str | None = None


class TelegramUpdate(BaseModel):
    update_id: int
    message: TelegramMessage | None = None
    callback_query: TelegramCallbackQuery | None = None


# Additional schemas for configuration and logging
class Environment(Enum):
    """Environment types for the application."""

    development = "development"
    production = "production"


class Theme(Enum):
    """Theme options for UI."""

    light = "light"
    dark = "dark"
    auto = "auto"


class ThemeSource(Enum):
    """Source of theme detection."""

    telegram = "telegram"
    system = "system"
    manual = "manual"


class LanguageSource(Enum):
    """Source of language detection."""

    telegram = "telegram"
    browser = "browser"
    manual = "manual"


class LogLevel(Enum):
    """Log levels for structured logging."""

    DEBUG = "DEBUG"
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"


class UIConfiguration(BaseModel):
    """UI configuration model."""

    id: UUID = Field(..., description="Configuration ID")
    environment: Environment = Field(..., description="Application environment")
    api_base_url: str = Field(..., description="API base URL")
    safe_area_top: int = Field(default=0, description="Top safe area inset")
    safe_area_bottom: int = Field(default=0, description="Bottom safe area inset")
    safe_area_left: int = Field(default=0, description="Left safe area inset")
    safe_area_right: int = Field(default=0, description="Right safe area inset")
    theme: Theme = Field(default=Theme.auto, description="UI theme")
    theme_source: ThemeSource = Field(default=ThemeSource.system, description="Theme source")
    language: str = Field(default="en", description="UI language")
    language_source: LanguageSource = Field(
        default=LanguageSource.browser, description="Language source"
    )
    features: dict[str, bool] | None = Field(default=None, description="Feature flags")
    created_at: AwareDatetime = Field(..., description="Creation timestamp")
    updated_at: AwareDatetime = Field(..., description="Last update timestamp")


class UIConfigurationUpdate(BaseModel):
    """UI configuration update model."""

    environment: Environment | None = None
    api_base_url: str | None = None
    safe_area_top: int | None = None
    safe_area_bottom: int | None = None
    safe_area_left: int | None = None
    safe_area_right: int | None = None
    theme: Theme | None = None
    theme_source: ThemeSource | None = None
    language: str | None = None
    language_source: LanguageSource | None = None
    features: dict[str, bool] | None = None


class ThemeDetectionResponse(BaseModel):
    """Response model for theme detection."""

    theme: Theme = Field(..., description="Detected theme")
    theme_source: ThemeSource = Field(..., description="Source of theme detection")
    telegram_color_scheme: str | None = Field(
        None, description="Telegram color scheme if available"
    )
    system_prefers_dark: bool | None = Field(None, description="System dark mode preference")
    detected_at: AwareDatetime = Field(..., description="Detection timestamp")


class LanguageDetectionResponse(BaseModel):
    """Response model for language detection."""

    language: str = Field(..., description="Detected language code")
    language_source: LanguageSource = Field(..., description="Source of language detection")
    telegram_language_code: str | None = Field(
        None, description="Telegram user language if available"
    )
    browser_language: str | None = Field(None, description="Browser language if available")
    detected_at: AwareDatetime = Field(..., description="Detection timestamp")
    supported_languages: list[str] = Field(..., description="List of supported language codes")


class LogEntry(BaseModel):
    """Structured log entry model."""

    id: UUID = Field(..., description="Unique log entry ID")
    timestamp: AwareDatetime = Field(..., description="Log timestamp")
    level: LogLevel = Field(..., description="Log level")
    message: str = Field(..., description="Log message")
    correlation_id: UUID | None = Field(None, description="Request correlation ID")

    # Structured context
    module: str | None = Field(None, description="Module or component name")
    function: str | None = Field(None, description="Function name")
    user_id: str | None = Field(None, description="User ID if applicable")
    request_id: str | None = Field(None, description="Request ID")

    # Additional context data
    context: dict[str, Any] | None = Field(None, description="Additional context data")
    error_details: dict[str, Any] | None = Field(None, description="Error details if applicable")


class LogEntryCreate(BaseModel):
    """Model for creating new log entries."""

    level: LogLevel = Field(..., description="Log level")
    message: str = Field(..., description="Log message")
    correlation_id: UUID | None = Field(None, description="Request correlation ID")
    module: str | None = Field(None, description="Module or component name")
    function: str | None = Field(None, description="Function name")
    context: dict[str, Any] | None = Field(None, description="Additional context data")


class ConnectionStatus(Enum):
    """Connection status for services."""

    connected = "connected"
    disconnected = "disconnected"
    error = "error"


class ConnectivityResponse(BaseModel):
    """Response model for connectivity checks."""

    status: ConnectionStatus = Field(..., description="Overall connection status")
    services: dict[str, Any] = Field(..., description="Individual service statuses")
    response_time_ms: float = Field(..., description="Response time in milliseconds")
    correlation_id: UUID = Field(..., description="Request correlation ID")
    timestamp: AwareDatetime = Field(..., description="Check timestamp")


class ServiceStatus(Enum):
    """Service status enumeration."""

    running = "running"
    stopped = "stopped"
    error = "error"


class SupabaseStatus(BaseModel):
    """Supabase service status."""

    status: ServiceStatus = Field(..., description="Service status")
    version: str | None = Field(None, description="Supabase version")
    database_url: str | None = Field(None, description="Database URL")
    db_port: int | None = Field(None, description="Database port")
    services: dict[str, bool] | None = Field(None, description="Service statuses")
    uptime_seconds: int | None = Field(None, description="Service uptime in seconds")
    last_check: AwareDatetime | None = Field(None, description="Last check timestamp")
    error_message: str | None = Field(None, description="Error message if any")


class DevelopmentEnvironment(BaseModel):
    """Development environment information."""

    id: UUID = Field(..., description="Environment ID")
    name: str = Field(..., description="Environment name")
    frontend_port: int = Field(..., description="Frontend development port")
    backend_port: int = Field(..., description="Backend development port")
    supabase_db_url: str = Field(..., description="Supabase database URL")
    supabase_db_password: str = Field(..., description="Supabase database password")
    redis_url: str = Field(..., description="Redis URL")
    storage_endpoint: str = Field(..., description="Storage endpoint URL")
    cors_origins: list[str] = Field(..., description="CORS allowed origins")
    log_level: str = Field(..., description="Log level")
    hot_reload: bool = Field(..., description="Hot reload enabled")
    supabase_cli_version: str = Field(..., description="Supabase CLI version")
    created_at: AwareDatetime = Field(..., description="Creation timestamp")
    updated_at: AwareDatetime = Field(..., description="Last update timestamp")


# Multi-Photo Meal Schemas (Feature: 003-update-logic-for)


class Macronutrients(BaseModel):
    """Macronutrient breakdown in grams."""

    protein: float = Field(..., ge=0, description="Protein in grams")
    carbs: float = Field(..., ge=0, description="Carbohydrates in grams")
    fats: float = Field(..., ge=0, description="Fats in grams")


class MealPhotoInfo(BaseModel):
    """Photo information for meal display."""

    id: UUID = Field(..., description="Photo ID")
    thumbnail_url: str = Field(..., description="Presigned URL for thumbnail")
    full_url: str = Field(..., description="Presigned URL for full-size image")
    display_order: int = Field(..., ge=0, le=4, description="Position in carousel (0-4)")


class MealWithPhotos(BaseModel):
    """Meal with associated photos and macronutrients."""

    id: UUID = Field(..., description="Meal ID")
    user_id: UUID = Field(..., description="User ID")
    created_at: AwareDatetime = Field(..., description="Meal creation timestamp")
    description: str | None = Field(None, max_length=1000, description="Meal description")
    calories: float = Field(..., ge=0, description="Total calories")
    macronutrients: Macronutrients = Field(..., description="Macronutrient breakdown")
    photos: list[MealPhotoInfo] = Field(default=[], description="Associated photos (max 5)")
    confidence_score: float | None = Field(None, ge=0, le=1, description="AI confidence (0-1)")


class MealUpdate(BaseModel):
    """Update request for meal details."""

    model_config = {"extra": "forbid"}

    description: str | None = Field(None, max_length=1000, description="Updated description")
    protein_grams: float | None = Field(None, ge=0, description="Updated protein in grams")
    carbs_grams: float | None = Field(None, ge=0, description="Updated carbs in grams")
    fats_grams: float | None = Field(None, ge=0, description="Updated fats in grams")


class MealCalendarDay(BaseModel):
    """Daily meal summary for calendar view."""

    meal_date: date = Field(..., description="Date")
    meal_count: int = Field(..., ge=0, description="Number of meals")
    total_calories: float = Field(..., ge=0, description="Total calories for the day")
    total_protein: float = Field(..., ge=0, description="Total protein in grams")
    total_carbs: float = Field(..., ge=0, description="Total carbs in grams")
    total_fats: float = Field(..., ge=0, description="Total fats in grams")


class MealsListResponse(BaseModel):
    """Response for GET /api/v1/meals."""

    meals: list[MealWithPhotos] = Field(..., description="List of meals")
    total: int = Field(..., ge=0, description="Total count in range")


class MealsCalendarResponse(BaseModel):
    """Response for GET /api/v1/meals/calendar."""

    dates: list[MealCalendarDay] = Field(..., description="Daily summaries")

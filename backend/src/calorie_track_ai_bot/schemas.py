# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-09-21T00:59:01+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any

from pydantic import AwareDatetime, BaseModel, Field


class Status(Enum):
    queued = "queued"
    running = "running"
    done = "done"
    failed = "failed"


class MealType(Enum):
    breakfast = "breakfast"
    lunch = "lunch"
    dinner = "dinner"
    snack = "snack"


class EstimateItem(BaseModel):
    label: str
    kcal: float
    confidence: float


class PhotoCreateRequest(BaseModel):
    content_type: str = Field(..., description="MIME type of the image (e.g., image/jpeg)")


class MealCreateManualRequest(BaseModel):
    meal_date: date
    meal_type: MealType
    kcal_total: float
    macros: dict[str, Any] | None = None


class MealCreateFromEstimateRequest(BaseModel):
    meal_date: date
    meal_type: MealType
    estimate_id: str
    overrides: dict[str, Any] | None = None


class MealCreateResponse(BaseModel):
    meal_id: str


class PresignResponse(BaseModel):
    photo_id: str
    upload_url: str


class EstimateQueuedResponse(BaseModel):
    estimate_id: str
    status: Status


class EstimateResponse(BaseModel):
    id: str = Field(..., description="Estimate ID")
    photo_id: str
    kcal_mean: float
    kcal_min: float
    kcal_max: float
    confidence: float
    breakdown: list[EstimateItem]
    status: Status | None = None


class TelegramUser(BaseModel):
    id: int
    is_bot: bool
    first_name: str
    last_name: str | None = None
    username: str | None = None
    language_code: str | None = None


class Type(Enum):
    private = "private"
    group = "group"
    supergroup = "supergroup"
    channel = "channel"


class TelegramChat(BaseModel):
    id: int
    type: Type
    title: str | None = None
    username: str | None = None
    first_name: str | None = None
    last_name: str | None = None


class TelegramPhotoSize(BaseModel):
    file_id: str
    file_unique_id: str
    width: int
    height: int
    file_size: int | None = None


class TelegramDocument(BaseModel):
    file_id: str
    file_unique_id: str
    file_name: str | None = None
    mime_type: str | None = None
    file_size: int | None = None


class TelegramWebhookInfo(BaseModel):
    url: str
    has_custom_certificate: bool
    pending_update_count: int
    ip_address: str | None = None
    last_error_date: int | None = None
    last_error_message: str | None = None
    max_connections: int | None = None
    allowed_updates: list[str] | None = None


class TelegramAuthRequest(BaseModel):
    init_data: str = Field(..., description="Telegram WebApp init data")
    hash: str = Field(..., description="Hash for verification")


class TelegramAuthResponse(BaseModel):
    user_id: str
    session_token: str
    expires_at: AwareDatetime


class TelegramMessage(BaseModel):
    message_id: int
    from_: TelegramUser = Field(..., alias="from")
    chat: TelegramChat
    date: int
    text: str | None = None
    photo: list[TelegramPhotoSize] | None = None
    document: TelegramDocument | None = None


class TelegramCallbackQuery(BaseModel):
    id: str
    from_: TelegramUser = Field(..., alias="from")
    message: TelegramMessage | None = None
    data: str | None = None


class TelegramUpdate(BaseModel):
    update_id: int
    message: TelegramMessage | None = None
    callback_query: TelegramCallbackQuery | None = None

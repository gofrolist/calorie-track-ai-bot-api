openapi: 3.1.1
info:
  title: Calories Count API
  version: 0.1.0

paths:
  /api/v1/photos:
    post:
      summary: Begin a new photo upload
      operationId: createPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoCreateRequest'
      responses:
        "200":
          description: Presigned URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignResponse'

  /api/v1/photos/{photo_id}/estimate:
    post:
      summary: Enqueue an estimation job for a photo
      operationId: enqueueEstimate
      parameters:
        - in: path
          name: photo_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Job queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateQueuedResponse'

  /api/v1/estimates/{estimate_id}:
    get:
      summary: Fetch an estimate
      operationId: getEstimate
      parameters:
        - in: path
          name: estimate_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Estimate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateResponse'

  /api/v1/meals:
    post:
      summary: Create a meal (manual or from estimate)
      operationId: createMeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/MealCreateManualRequest'
                - $ref: '#/components/schemas/MealCreateFromEstimateRequest'
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealCreateResponse'

  # ---------- Health Check Endpoints ----------
  /healthz:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /health/live:
    get:
      summary: Liveness probe
      operationId: livenessProbe
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "alive"

  /health/ready:
    get:
      summary: Readiness probe
      operationId: readinessProbe
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"

  # ---------- Telegram Bot Endpoints ----------
  /bot:
    post:
      summary: Telegram webhook handler
      operationId: telegramWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUpdate'
      responses:
        "200":
          description: Webhook processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /bot/setup:
    post:
      summary: Setup Telegram webhook
      operationId: setupTelegramWebhook
      responses:
        "200":
          description: Webhook configured
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "webhook_set"

  /bot/webhook-info:
    get:
      summary: Get Telegram webhook information
      operationId: getTelegramWebhookInfo
      responses:
        "200":
          description: Webhook information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramWebhookInfo'

  /bot/webhook:
    delete:
      summary: Delete Telegram webhook
      operationId: deleteTelegramWebhook
      responses:
        "200":
          description: Webhook deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "webhook_deleted"

  # ---------- Authentication Endpoints ----------
  /auth/telegram/init:
    post:
      summary: Initialize Telegram authentication
      operationId: initTelegramAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramAuthRequest'
      responses:
        "200":
          description: Authentication initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramAuthResponse'

components:
  schemas:
    # ---------- Enums (string) ----------
    Status:
      type: string
      enum: [queued, running, done, failed]

    MealType:
      type: string
      enum: [breakfast, lunch, dinner, snack]

    # ---------- Shared models ----------
    EstimateItem:
      type: object
      properties:
        label:
          type: string
        kcal:
          type: number
        confidence:
          type: number
      required: [label, kcal, confidence]

    # ---------- Requests ----------
    PhotoCreateRequest:
      type: object
      properties:
        content_type:
          type: string
          description: MIME type of the image (e.g., image/jpeg)
      required: [content_type]

    MealCreateManualRequest:
      type: object
      properties:
        meal_date:
          type: string
          format: date
        meal_type:
          $ref: '#/components/schemas/MealType'
        kcal_total:
          type: number
        macros:
          type: object
          additionalProperties: true
      required: [meal_date, meal_type, kcal_total]

    MealCreateFromEstimateRequest:
      type: object
      properties:
        meal_date:
          type: string
          format: date
        meal_type:
          $ref: '#/components/schemas/MealType'
        estimate_id:
          type: string
        overrides:
          type: object
          additionalProperties: true
      required: [meal_date, meal_type, estimate_id]

    MealCreateResponse:
      type: object
      properties:
        meal_id: { type: string }
      required: [meal_id]

    # ---------- Responses ----------
    PresignResponse:
      type: object
      properties:
        photo_id:
          type: string
        upload_url:
          type: string
      required: [photo_id, upload_url]

    EstimateQueuedResponse:
      type: object
      properties:
        estimate_id:
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required: [estimate_id, status]

    EstimateResponse:
      type: object
      properties:
        id:
          type: string
          description: Estimate ID
        photo_id:
          type: string
        kcal_mean:
          type: number
        kcal_min:
          type: number
        kcal_max:
          type: number
        confidence:
          type: number
        breakdown:
          type: array
          items:
            $ref: '#/components/schemas/EstimateItem'
        status:
          $ref: '#/components/schemas/Status'
      required: [id, photo_id, kcal_mean, kcal_min, kcal_max, confidence, breakdown]

    # ---------- Telegram Bot Schemas ----------
    TelegramUpdate:
      type: object
      properties:
        update_id:
          type: integer
        message:
          $ref: '#/components/schemas/TelegramMessage'
        callback_query:
          $ref: '#/components/schemas/TelegramCallbackQuery'
      required: [update_id]

    TelegramMessage:
      type: object
      properties:
        message_id:
          type: integer
        from:
          $ref: '#/components/schemas/TelegramUser'
        chat:
          $ref: '#/components/schemas/TelegramChat'
        date:
          type: integer
        text:
          type: string
        photo:
          type: array
          items:
            $ref: '#/components/schemas/TelegramPhotoSize'
        document:
          $ref: '#/components/schemas/TelegramDocument'
      required: [message_id, from, chat, date]

    TelegramUser:
      type: object
      properties:
        id:
          type: integer
        is_bot:
          type: boolean
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        language_code:
          type: string
      required: [id, is_bot, first_name]

    TelegramChat:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [private, group, supergroup, channel]
        title:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
      required: [id, type]

    TelegramPhotoSize:
      type: object
      properties:
        file_id:
          type: string
        file_unique_id:
          type: string
        width:
          type: integer
        height:
          type: integer
        file_size:
          type: integer
      required: [file_id, file_unique_id, width, height]

    TelegramDocument:
      type: object
      properties:
        file_id:
          type: string
        file_unique_id:
          type: string
        file_name:
          type: string
        mime_type:
          type: string
        file_size:
          type: integer
      required: [file_id, file_unique_id]

    TelegramCallbackQuery:
      type: object
      properties:
        id:
          type: string
        from:
          $ref: '#/components/schemas/TelegramUser'
        message:
          $ref: '#/components/schemas/TelegramMessage'
        data:
          type: string
      required: [id, from]

    TelegramWebhookInfo:
      type: object
      properties:
        url:
          type: string
        has_custom_certificate:
          type: boolean
        pending_update_count:
          type: integer
        ip_address:
          type: string
        last_error_date:
          type: integer
        last_error_message:
          type: string
        max_connections:
          type: integer
        allowed_updates:
          type: array
          items:
            type: string
      required: [url, has_custom_certificate, pending_update_count]

    # ---------- Authentication Schemas ----------
    TelegramAuthRequest:
      type: object
      properties:
        init_data:
          type: string
          description: Telegram WebApp init data
        hash:
          type: string
          description: Hash for verification
      required: [init_data, hash]

    TelegramAuthResponse:
      type: object
      properties:
        user_id:
          type: string
        session_token:
          type: string
        expires_at:
          type: string
          format: date-time
      required: [user_id, session_token, expires_at]

# Backend Environment Configuration Template
# Copy this file to .env and update the values for your local development setup
# cp env.template .env

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Application Environment (development, production)
APP_ENV=development

# Logging Configuration
LOG_LEVEL=DEBUG
LOG_HASH_SECRET=your-log-hash-secret-32-characters-long

# =============================================================================
# SUPABASE DATABASE CONFIGURATION
# =============================================================================

# Local Development (Supabase CLI - PREFERRED METHOD)
# 1. Install Supabase CLI: npm install -g supabase
# 2. Start local database: supabase db start
# 3. Copy keys from the output below:
SUPABASE_URL=http://localhost:54321
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOuoJeoDQa2DEOh5NJVr5Y9Y1yG_iJjGwBhU
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

# Production Supabase (uncomment and set for production)
# SUPABASE_URL=https://your-project-id.supabase.co
# SUPABASE_ANON_KEY=your_production_anon_key
# SUPABASE_SERVICE_ROLE_KEY=your_production_service_role_key

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Local Development Redis
REDIS_URL=redis://localhost:6379/0

# Production Upstash Redis (uncomment for production)
# REDIS_URL=redis://default:password@your-redis.upstash.io:6379

# =============================================================================
# OBJECT STORAGE CONFIGURATION
# =============================================================================

# Local Development (MinIO via Docker Compose)
AWS_ENDPOINT_URL_S3=http://localhost:9000
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin
BUCKET_NAME=calorie-track-dev

# Production Tigris Storage (uncomment for production)
# AWS_ENDPOINT_URL_S3=https://fly.storage.tigris.dev
# AWS_ACCESS_KEY_ID=your_tigris_access_key
# AWS_SECRET_ACCESS_KEY=your_tigris_secret_key
# BUCKET_NAME=your_production_bucket_name

# =============================================================================
# TELEGRAM BOT CONFIGURATION
# =============================================================================

# Telegram Bot Token (get from @BotFather)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Webhook Configuration (set to false for local development)
USE_WEBHOOK=false
WEBHOOK_URL=https://your-domain.com/api/v1/bot/webhook

# =============================================================================
# OPENAI CONFIGURATION
# =============================================================================

# OpenAI API Configuration
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-5-mini

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS Origins (comma-separated list)
# Development
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173,https://localhost:3000,https://127.0.0.1:3000

# Production (uncomment and set for production)
# CORS_ORIGINS=https://your-frontend-domain.vercel.app,https://telegram.org,https://web.telegram.org

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Trusted Hosts (for production)
TRUSTED_HOSTS=localhost,127.0.0.1,*.fly.dev

# Development Endpoints (set to false in production)
DEV_ENDPOINTS_ENABLED=true

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================

# API Timeouts (in seconds)
API_TIMEOUT=30
DB_TIMEOUT=10

# Queue Configuration
QUEUE_MAX_RETRIES=3
QUEUE_RETRY_DELAY=5

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Debug and Development Features
ENABLE_DEBUG_LOGGING=true
ENABLE_ERROR_REPORTING=false
ENABLE_ANALYTICS=false
ENABLE_DEV_TOOLS=true

# UI/UX Features
ENABLE_SAFE_AREAS=true
ENABLE_THEME_DETECTION=true
ENABLE_LANGUAGE_DETECTION=true
ENABLE_CONNECTIVITY_MONITORING=true

# =============================================================================
# QUICKSTART SETUP INSTRUCTIONS
# =============================================================================

# 1. Copy this file to .env:
#    cp env.template .env

# 2. Start Supabase database (REQUIRED):
#    npm install -g supabase
#    supabase db start
#    # This will start database at http://localhost:54321
#    # Supabase Studio at http://localhost:54323
#    # Use the default keys provided above or copy from output

# 3. Start supporting services with Docker Compose:
#    docker-compose up redis minio
#    # OR start everything: docker-compose up

# 4. Get Telegram Bot Token:
#    - Message @BotFather on Telegram
#    - Create a new bot with /newbot
#    - Copy the token to TELEGRAM_BOT_TOKEN

# 5. Get OpenAI API Key:
#    - Visit https://platform.openai.com/api-keys
#    - Create a new API key
#    - Copy the key to OPENAI_API_KEY

# 6. Start the backend:
#    uv run uvicorn calorie_track_ai_bot.main:app --reload --host 0.0.0.0 --port 8000

# 7. Test the setup:
#    curl http://localhost:8000/health/live
#    curl http://localhost:8000/health/connectivity
